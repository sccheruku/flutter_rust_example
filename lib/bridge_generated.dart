// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class Rust {
  Future<ActionResponse> call({required ActionRequest request, dynamic hint});

  Future<int> getCounter({dynamic hint});

  Future<int> increment({dynamic hint});

  Future<int> decrement({dynamic hint});

  Stream<int> tick({dynamic hint});

  Stream<int> startStream({dynamic hint});

  Future<void> stopStream({dynamic hint});
}

class ActionRequest {
  final String action;
  final String payload;

  ActionRequest({
    required this.action,
    required this.payload,
  });
}

class ActionResponse {
  final String response;
  final bool success;

  ActionResponse({
    required this.response,
    required this.success,
  });
}

class RustImpl extends FlutterRustBridgeBase<RustWire> implements Rust {
  factory RustImpl(ffi.DynamicLibrary dylib) => RustImpl.raw(RustWire(dylib));

  RustImpl.raw(RustWire inner) : super(inner);

  Future<ActionResponse> call({required ActionRequest request, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_call(
            port_, _api2wire_box_autoadd_action_request(request)),
        parseSuccessData: _wire2api_action_response,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "call",
          argNames: ["request"],
        ),
        argValues: [request],
        hint: hint,
      ));

  Future<int> getCounter({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_counter(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_counter",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<int> increment({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_increment(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "increment",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<int> decrement({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_decrement(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "decrement",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Stream<int> tick({dynamic hint}) => executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_tick(port_),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "tick",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Stream<int> startStream({dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_start_stream(port_),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "start_stream",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<void> stopStream({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_stop_stream(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "stop_stream",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_ActionRequest> _api2wire_box_autoadd_action_request(
      ActionRequest raw) {
    final ptr = inner.new_box_autoadd_action_request();
    _api_fill_to_wire_action_request(raw, ptr.ref);
    return ptr;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_action_request(
      ActionRequest apiObj, wire_ActionRequest wireObj) {
    wireObj.action = _api2wire_String(apiObj.action);
    wireObj.payload = _api2wire_String(apiObj.payload);
  }

  void _api_fill_to_wire_box_autoadd_action_request(
      ActionRequest apiObj, ffi.Pointer<wire_ActionRequest> wireObj) {
    _api_fill_to_wire_action_request(apiObj, wireObj.ref);
  }
}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

ActionResponse _wire2api_action_response(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return ActionResponse(
    response: _wire2api_String(arr[0]),
    success: _wire2api_bool(arr[1]),
  );
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

int _wire2api_u64(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RustWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_call(
    int port_,
    ffi.Pointer<wire_ActionRequest> request,
  ) {
    return _wire_call(
      port_,
      request,
    );
  }

  late final _wire_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_ActionRequest>)>>('wire_call');
  late final _wire_call = _wire_callPtr
      .asFunction<void Function(int, ffi.Pointer<wire_ActionRequest>)>();

  void wire_get_counter(
    int port_,
  ) {
    return _wire_get_counter(
      port_,
    );
  }

  late final _wire_get_counterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_counter');
  late final _wire_get_counter =
      _wire_get_counterPtr.asFunction<void Function(int)>();

  void wire_increment(
    int port_,
  ) {
    return _wire_increment(
      port_,
    );
  }

  late final _wire_incrementPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_increment');
  late final _wire_increment =
      _wire_incrementPtr.asFunction<void Function(int)>();

  void wire_decrement(
    int port_,
  ) {
    return _wire_decrement(
      port_,
    );
  }

  late final _wire_decrementPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_decrement');
  late final _wire_decrement =
      _wire_decrementPtr.asFunction<void Function(int)>();

  void wire_tick(
    int port_,
  ) {
    return _wire_tick(
      port_,
    );
  }

  late final _wire_tickPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_tick');
  late final _wire_tick = _wire_tickPtr.asFunction<void Function(int)>();

  void wire_start_stream(
    int port_,
  ) {
    return _wire_start_stream(
      port_,
    );
  }

  late final _wire_start_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_start_stream');
  late final _wire_start_stream =
      _wire_start_streamPtr.asFunction<void Function(int)>();

  void wire_stop_stream(
    int port_,
  ) {
    return _wire_stop_stream(
      port_,
    );
  }

  late final _wire_stop_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_stop_stream');
  late final _wire_stop_stream =
      _wire_stop_streamPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_ActionRequest> new_box_autoadd_action_request() {
    return _new_box_autoadd_action_request();
  }

  late final _new_box_autoadd_action_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ActionRequest> Function()>>(
          'new_box_autoadd_action_request');
  late final _new_box_autoadd_action_request =
      _new_box_autoadd_action_requestPtr
          .asFunction<ffi.Pointer<wire_ActionRequest> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ActionRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> action;

  external ffi.Pointer<wire_uint_8_list> payload;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
